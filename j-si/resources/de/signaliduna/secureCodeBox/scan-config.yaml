apiVersion: v1
kind: Template
metadata:
  name: securecodebox-scantypes

parameters:
  - description: App Username
    displayName: App Username
    name: APP_USERNAME
    required: true

  - description: App Password
    displayName: App Password
    name: APP_PASSWORD
    required: true

objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: zap-advanced-scantype-secret
    type: Opaque
    stringData:
      2-zap-advanced-scantype-secret.yaml: |

        # ZAP Contexts Configuration 
        contexts:
          # Name to be used to refer to this context in other jobs, mandatory
          - name: scb-sda-context
            # Auth credentials used for the OIDC "Resource Owner Password Flow" to retrieve fresh access tokes for your API.
            users:
              - name: sda-apiscan-user
                username: "${APP_USERNAME}"
                password: "${APP_PASSWORD}"
                forced: true
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: zap-scripts-authentication
      labels:
        app: securecodebox-stack
    data:
      scb-oidc-client-credentials-type.js: |-
        // SPDX-FileCopyrightText: 2021 iteratec GmbH
        //
        // SPDX-License-Identifier: Apache-2.0

        var HttpRequestHeader = Java.type("org.parosproxy.paros.network.HttpRequestHeader"),
            HttpHeader = Java.type("org.parosproxy.paros.network.HttpHeader"),
            URI = Java.type("org.apache.commons.httpclient.URI"),
            Base64 = Java.type("java.util.Base64"),
            JavaString = Java.type("java.lang.String");

        /**
        * OIDC Password Grant Type based authentication script for ZAP.
        *
        * This authenticate function is called whenever ZAP requires to authenticate,
        * for a Context which has this script selected as the authentication method.
        *
        * This function should send any messages that are required to do the authentication
        * and should return a message with an authenticated response.
        *
        * This auth is based on the grand type "password" to retrieve fresh tokens:
        * https://developer.okta.com/blog/2018/06/29/what-is-the-oauth2-password-grant
        *
        * For Authentication select/configure in your ZAP Context:
        *
        * - Authentication method: ScriptBased Authentication
        * - Login FORM target URL: https://$keycloak-url/auth/realms/$app/protocol/openid-connect/token
        * - Username Parameter: your-username-to-get-tokens
        * - Password Parameter: your-password-to-get-tokens
        * - Logged out regex: ".*Credentials are required to access this resource.*"
        *
        * NOTE: Any message sent in the function should be obtained using the 'helper.prepareMessage()'
        *       method.
        *
        * @param {Object} helper - Helper class providing useful methods: prepareMessage(), sendAndReceive(msg).
        * @param {Object} paramsValues - Values of the parameters configured in the Session Properties -> Authentication panel.
        *                                The paramsValues is a map with parameters names as keys (like returned
        *                                by the getRequiredParamsNames() and getOptionalParamsNames() functions below).
        * @param {Object} credentials - Object containing the credentials configured in the Session Properties -> Users panel.
        *                               The credential values can be obtained via calls to the getParam(paramName) method.
        *                               The param names are the ones returned by the getCredentialsParamsNames() below.
        */
        function authenticate(helper, paramsValues, credentials) {
            print("Authentication via scb-oidc-client-credentials-type.js");

            // Prepare the login request details
            var url = paramsValues.get("URL");
            var grantType = paramsValues.get("grantType");
            print("Logging in to url: " + url);

            var requestUri = new URI(url, false);

            // print("getHost: " + uri.getHost())
            // print("getPort: " + uri.getPort())
            // print("getPath: " + uri.getPath())
            // print("getQuery: " + uri.getQuery())

            // // build the actual uri with user info
            // var requestUri = new URI(uri.getScheme(), credentials.getParam("username") + ":" + credentials.getParam("password"), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery())
            var requestMethod = HttpRequestHeader.POST;

            // Build the request body using the credentials values
            var requestBody = "grant_type=" + grantType;

            // Build the actual message to be sent
            var msg = helper.prepareMessage();

            msg.setRequestBody(requestBody);
            
            var requestHeader = new HttpRequestHeader(requestMethod, requestUri, HttpHeader.HTTP10);
            msg.setRequestHeader(requestHeader);
            
            var basicAuthString = new JavaString(credentials.getParam("username") + ":" + credentials.getParam("password"))
            var encodedAuthorizationHeader = Base64.getEncoder().encodeToString(basicAuthString.getBytes())
            msg.getRequestHeader().setHeader(HttpHeader.AUTHORIZATION, "Basic " + encodedAuthorizationHeader);
            msg.getRequestHeader().setHeader(HttpHeader.CONTENT_TYPE, "application/x-www-form-urlencoded");
            msg.getRequestHeader().setContentLength(msg.getRequestBody().length());

            // print("Msg prepared:")
            // print("  |- URI:" + msg.getRequestHeader().getURI().toString())
            // print("  |- METHOD:" + msg.getRequestHeader().getMethod())
            // print("  |- HEADER:" + msg.getRequestHeader().getHeadersAsString())
            // print("  |- BODY:" + msg.getRequestBody().toString())

            // Send the authentication message and return it
            try {
                helper.sendAndReceive(msg);
                // print("Received response status code for authentication request: " + msg.getResponseHeader().getStatusCode());
                // print("  |- Received response HEADER: " + msg.getResponseHeader().getHeadersAsString());
                // print("  |- Received response BODY: " + msg.getResponseBody());
                return msg;
            } catch (err) {
                print("Got error");
                print(err);
            }

            return null
        }

        /**
        * This function is called during the script loading to obtain a list of required configuration parameter names.
        *
        * These names will be shown in the Session Properties -> Authentication panel for configuration. They can be used
        * to input dynamic data into the script, from the user interface (e.g. a login URL, name of POST parameters etc.).
        */
        function getRequiredParamsNames() {
            return ["URL", "grantType"];
        }

        /**
        * This function is called during the script loading to obtain a list of optional configuration parameter names.
        *
        * These will be shown in the Session Properties -> Authentication panel for configuration. They can be used
        * to input dynamic data into the script, from the user interface (e.g. a login URL, name of POST parameters etc.).
        */
        function getOptionalParamsNames() {
            return [];
        }

        /**
        * This function is called during the script loading to obtain a list of required credential parameter names.
        *
        * They are configured for each user corresponding to an authentication using this script.
        */
        function getCredentialsParamsNames() {
            return ["username", "password"];
        }
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: zap-scripts-session
      labels:
        app: securecodebox-stack
    data:
      juiceshop-session-management.js: |-
        /*
        * Session Management script for OWASP Juice Shop: https://raw.githubusercontent.com/zaproxy/community-scripts/master/session/Juice%20Shop%20Session%20Management.js
        * 
        * For Authentication select:
        * 		Authentication method:		JSON-based authentication
        * 		Login FORM target URL:		http://localhost:3000/rest/user/login
        * 		URL to GET Login Page:		http://localhost:3000/
        * 		Login Request POST data:	{"email":"test@test.com","password":"test1"}
        * 		Username Parameter:			email
        * 		Password Parameter:			password
        * 		Logged out regex:			\Q{"user":{}}\E
        * 
        * Obviously update with any local changes as necessary.
        */

        var COOKIE_TYPE   = org.parosproxy.paros.network.HtmlParameter.Type.cookie;
        var HtmlParameter = Java.type('org.parosproxy.paros.network.HtmlParameter')
        var ScriptVars = Java.type('org.zaproxy.zap.extension.script.ScriptVars');

        function extractWebSession(sessionWrapper) {
          // parse the authentication response
          var json = JSON.parse(sessionWrapper.getHttpMessage().getResponseBody().toString());
          var token = json.authentication.token;
          // save the authentication token
          sessionWrapper.getSession().setValue("token", token);
          ScriptVars.setGlobalVar("juiceshop.token", token);
        }
              
        function clearWebSessionIdentifiers(sessionWrapper) {
          var headers = sessionWrapper.getHttpMessage().getRequestHeader();
          headers.setHeader("Authorization", null);
          ScriptVars.setGlobalVar("juiceshop.token", null);
        }
              
        function processMessageToMatchSession(sessionWrapper) {
          var token = sessionWrapper.getSession().getValue("token");
          if (token === null) {
            print('JS mgmt script: no token');
            return;
          }
          var cookie = new HtmlParameter(COOKIE_TYPE, "token", token);
          // add the saved authentication token as an Authentication header and a cookie
          var msg = sessionWrapper.getHttpMessage();
          msg.getRequestHeader().setHeader("Authorization", "Bearer " + token);
          var cookies = msg.getRequestHeader().getCookieParams();
          cookies.add(cookie);
          msg.getRequestHeader().setCookieParams(cookies);
        }

        function getRequiredParamsNames() {
          return [];
        }

        function getOptionalParamsNames() {
          return [];
        }

      scb-oidc-session-management.js: |-
        // SPDX-FileCopyrightText: 2021 iteratec GmbH
        //
        // SPDX-License-Identifier: Apache-2.0

        /**
        * Session Management script for OIDC Authentication.
        *
        * Adapted from OWASP Juice Shop Example: https://www.zaproxy.org/blog/2020-06-04-zap-2-9-0-highlights/
        *
        * For Authentication select/configure in your ZAP Context:
        *
        * - Authentication method: ScriptBased Authentication
        * - Login FORM target URL: https://$keycloak-url/auth/realms/$app/protocol/openid-connect/token
        * - Username Parameter: your-username-to-get-tokens
        * - Password Parameter: your-password-to-get-tokens
        * - Logged out regex: ".*Credentials are required to access this resource.*"
        */

        function extractWebSession(sessionWrapper) {
            // parse the authentication response
            var json = JSON.parse(sessionWrapper.getHttpMessage().getResponseBody().toString());
            var token = json.access_token;
            // save the authentication token
            sessionWrapper.getSession().setValue("token", token);
        }

        function clearWebSessionIdentifiers(sessionWrapper) {
            var headers = sessionWrapper.getHttpMessage().getRequestHeader();
            headers.setHeader("Authorization", null);
        }

        function processMessageToMatchSession(sessionWrapper) {
            var token = sessionWrapper.getSession().getValue("token");
            if (token === null) {
                print('Session Managment script: no token');
                return;
            }

            // add the saved authentication token as an Authentication header and a cookie
            var msg = sessionWrapper.getHttpMessage();
            msg.getRequestHeader().setHeader("Authorization", "Bearer " + token);
            // print("   |- Added session token to request: " + msg.getRequestHeader().getURI().toString())
        }

        /**
        * This function is called during the script loading to obtain a list of required configuration parameter names.
        *
        * These names will be shown in the Session Properties -> Authentication panel for configuration. They can be used
        * to input dynamic data into the script, from the user interface (e.g. a login URL, name of POST parameters etc.).
        */
        function getRequiredParamsNames() {
            return [];
        }

        /**
        * This function is called during the script loading to obtain a list of optional configuration parameter names.
        *
        * These will be shown in the Session Properties -> Authentication panel for configuration. They can be used
        * to input dynamic data into the script, from the user interface (e.g. a login URL, name of POST parameters etc.).
        */
        function getOptionalParamsNames() {
            return [];
        }
